<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--status="WARN" :用于设置log4j2自身内部日志的信息输出级别，默认是OFF-->
<!--monitorInterval="30"  :间隔秒数,自动检测配置文件的变更和重新配置本身-->
<configuration status="WARN" monitorInterval="30">
    <Properties>
        <!--自定义一些常量，之后使用${变量名}引用-->
        <Property name="logFilePath">log</Property>
        <Property name="logFileName">test.log</Property>
<!--        //%d{yyyy-MM-dd HH:mm:ss:SSS} %5p  %c{1}:%L - %m%n   %d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n-->
<!--    参照这两个：   %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %m%n               %d{HH:mm:ss.SSS} [%t] %-5level %c{36} - %m%n    -->
        <property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %c{36} - %m%n</property>
    </Properties>
    <!--appenders:定义输出内容,输出格式,输出方式,日志保存策略等,常用其下三种标签[console,File,RollingFile]-->
    <appenders>

       <!--1. 设置SMTPAppender属性-->
        <!--          to  收件人，多个逗号隔开，from发件人-->
<!--        smtpPassword:设置QQ邮件客户端时候的授权码-->

        <smtp name="Mail" subject="Error Log" to="709737588@qq.com,517312606@qq.com" from="1513918351@qq.com"
              replyTo="1513918351@qq.com" smtpHost="smtp.qq.com"  smtpDebug="false" smtpProtocol="smtps"
              smtpUsername="1513918351@qq.com" smtpPassword="ipxczauxtutggecb" smtpPort="465" bufferSize="1024">
              <!--定义error级别日志才发-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
		</smtp>

        <!--console :控制台输出的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--PatternLayout :输出日志的格式,LOG4J2定义了输出代码,详见第二部分-->
            <PatternLayout pattern="${log_pattern}"/>
        </console>


        <!--File :同步输出日志到本地文件-->
        <!--append="false" :根据其下日志策略,每次清空文件重新输入日志,可用于测试-->
        <!--        <File name="log" fileName="${logFilePath}/${logFileName}" append="false">-->
        <!--            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>-->
        <!--        </File>-->


        <!-- ${sys:user.home} : 默认项目路径   root /root   普通用户  /home-->

        <!--        记录优先级大于Info的-->
        <RollingFile name="RollingFileInfo" fileName="logs/${date:yyyy-MM}/${date:yyyy-MM-dd}/info.log"
                     filePattern="logs/$${date:yyyy-MM}/$${date:yyyy-MM-dd}/info-%d{yyyy-MM-dd}-%i.log">
            <!--ThresholdFilter :日志输出过滤-->
            <!--level="info" :日志级别,onMatch="ACCEPT" :级别在info之上则接受,onMismatch="DENY" :级别在info之下则拒绝-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n"/>-->

            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %m%n"/>
            <!-- Policies :日志滚动策略-->
            <Policies>
                <!-- TimeBasedTriggeringPolicy :时间滚动策略,默认0点小时产生新的文件,interval="6" : 自定义文件滚动时间间隔,每隔6小时产生新文件, modulate="true" : 产生文件是否以0点偏移时间,即6点,12点,18点,0点-->
                <TimeBasedTriggeringPolicy interval="6" modulate="true"/>
                <!-- SizeBasedTriggeringPolicy :文件大小滚动策略-->
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

        <RollingFile name="RollingFileWarn" fileName="logs/${date:yyyy-MM}/${date:yyyy-MM-dd}/warn.log"
                     filePattern="logs/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>
        <RollingFile name="RollingFileError" fileName="logs/${date:yyyy-MM}/${date:yyyy-MM-dd}/error.log"
                     filePattern="logs/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

        <RollingFile name="RollingFile" fileName="logs/${date:yyyy-MM}/${date:yyyy-MM-dd}/log.log"
                             filePattern="logs/$${date:yyyy-MM}/$${date:yyyy-MM-dd}/info-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %X{traceId} -%5p ${PID:-} [%15.15t] %-30.30C{1.} : %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="6" modulate="true"/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

        <!--2. 定义异步发通知邮件AsyncAppender属性-->
        <Async name="AsyncMail">
			<appender-ref ref="Mail"/>
		</Async>
    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <!--Logger节点用来单独指定日志的形式，name为包路径,比如要为org.springframework包下所有日志指定为INFO级别等。 -->
        <logger name="org.springframework" level="INFO"></logger>
        <logger name="org.mybatis" level="INFO"></logger>


<!--        异步-->
<!--                root:用来输出哪些日志-->
<!--         Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出 -->
        <AsyncRoot level="all">
            <appender-ref ref="Console"/>
<!--            <appender-ref ref="RollingFileInfo"/>-->
            <!--            <appender-ref ref="RollingFileWarn"/>-->
            <!--            <appender-ref ref="RollingFileError"/>-->
         <appender-ref ref="RollingFile"/>
<!--            调试禁用日志-->
<!--         <appender-ref ref="Mail"/>-->
        </AsyncRoot>

<!--        同步-->
<!--         <root level="info">-->
<!--&lt;!&ndash;             <appender-ref ref="Console"/>&ndash;&gt;-->
<!--&lt;!&ndash;             <appender-ref ref="RollingFileInfo"/>&ndash;&gt;-->
<!--&lt;!&ndash;             <appender-ref ref="RollingFileError"/>&ndash;&gt;-->
<!--              <appender-ref ref="RollingFile"/>-->
<!--             &lt;!&ndash;3. 在root里面调用AsyncAppender配置&ndash;&gt;-->
<!--             <appender-ref ref="AsyncMail"/>-->
<!--        </root>-->


        <!--AsyncLogger :异步日志,LOG4J有三种日志模式,全异步日志,混合模式,同步日志,性能从高到底,线程越多效率越高,也可以避免日志卡死线程情况发生-->
        <!--additivity="false" : additivity设置事件是否在root logger输出，为了避免重复输出，可以在Logger 标签下设置additivity为”false”-->

        <!--        <AsyncLogger name="AsyncLogger" level="trace" includeLocation="true" additivity="false">-->

<!--&lt;!&ndash;            AsyncLogger配置不起作用，不用配置，就配置root就可以&ndash;&gt;-->
<!--            &lt;!&ndash;            <appender-ref ref="Console"/>&ndash;&gt;-->
<!--            &lt;!&ndash;            <appender-ref ref="RollingFileInfo"/>&ndash;&gt;-->
<!--            &lt;!&ndash;            <appender-ref ref="RollingFileWarn"/>&ndash;&gt;-->
<!--            &lt;!&ndash;            <appender-ref ref="RollingFileError"/>&ndash;&gt;-->
<!--&lt;!&ndash;            <appender-ref ref="RollingFile"/>&ndash;&gt;-->
<!--        </AsyncLogger>-->


    </loggers>
</configuration>